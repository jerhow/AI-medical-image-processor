@page
@model MedicalImageAI.Web.Pages.UploadModel
@{
    ViewData["Title"] = "Upload Medical Image for Analysis";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-8">
        <p>Select an image file (PNG, JPG, JPEG, BMP - Max 4MB) to upload for analysis.</p>
        <p>Analysis will be performed in the background. This page will confirm if your upload was accepted for processing.</p>
        
        <form method="post" enctype="multipart/form-data" class="mt-4">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div> @* Shows model-level errors *@

            <div class="mb-3">
                <label asp-for="UploadedImage" class="form-label">Choose Image:</label>
                <input asp-for="UploadedImage" class="form-control" type="file" required>
                <span asp-validation-for="UploadedImage" class="text-danger"></span>
            </div>
            
            <button type="submit" class="btn btn-primary">Upload and Queue for Analysis</button>
        </form>
    </div>
</div>

@* Area to display initial acceptance and then polled results *@
<div class="row mt-4">
    <div class="col-md-8">
        @if (Model.PageResponse != null) // After initial POST and 202 Accepted
        {
            <div id="uploadConfirmation" class="alert alert-success" role="alert">
                <h4 class="alert-heading">Request Accepted!</h4>
                <p>@Model.PageResponse.Message</p>
                <p class="mb-0">Server Filename: <strong>@Model.PageResponse.FileName</strong></p>
                <p class="mt-2">Attempting to fetch analysis results...</p>
            </div>
        }

        @* This div will be updated by JavaScript polling *@
        <div id="analysisResultsArea" class="mt-3"></div>

        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div id="uploadError" class="alert alert-danger mt-3" role="alert">
                <h4 class="alert-heading">An error occurred:</h4>
                <p>@Model.ErrorMessage</p>
            </div>
        }

        <div id="imageVisualizationArea" class="mt-3" style="display: none;"> <h6>Image with Detections:</h6>
            <div id="imageDisplayContainer" style="position: relative; display: inline-block; max-width: 100%; border:1px solid #ddd;">
                <img id="analyzedImageDisplay" src="#" alt="Analyzed Image" style="display: block; max-width: 100%; height: auto;" />
                <canvas id="overlayCanvas" style="position: absolute; top: 0; left: 0;"></canvas>
            </div>
            <div id="detectedObjectsListText" class="mt-2"></div>
        </div>
    </div>
</div>

@* In Pages/Upload.cshtml, where your CSV download button is *@
<hr class="mt-5 mb-4" />
<div class="row">
    <div class="col-md-8">
        <h3>Download Full Analysis Report</h3>
        <p>Download a CSV file containing all image analysis job details and their primary results.</p>
        <a asp-page="/Upload" asp-page-handler="DownloadCsvReport" class="btn btn-info">Download CSV Report</a>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    @* Polling for whether a JobId is available, and fetching the results + updating the UI if so *@
    @if (Model.PageResponse?.JobId != null && Model.PageResponse.JobId != Guid.Empty)
    {
        <script>
            @* Helper function to escape HTML to remove some XSS vectors *@
            function escapeHtml(unsafe) {
                if (unsafe === null || typeof unsafe === 'undefined') return '';
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }

            (function () {
                const jobId = "@Model.PageResponse.JobId";
                @* In this case, PageModel exposes Configuration as a public property.
                   Alternatively, we could have injected IConfiguration into the view. *@
                const apiBaseUrl = "@Model.Configuration["ApiSettings:BaseUrl"]"; // Ensure Configuration is injected into UploadModel and accessible
                const statusUrl = `/Upload?handler=AnalysisStatus&jobId=${jobId}`;
                const resultsArea = document.getElementById("analysisResultsArea");
                let pollingInterval = 3000; // Poll every 3 seconds
                let maxPollAttempts = 20; // Stop after 20 attempts (1 minute)
                let pollAttempts = 0;

                // Elements for displaying image and detected objects
                const imageVisualizationArea = document.getElementById('imageVisualizationArea');
                const imgElement = document.getElementById('analyzedImageDisplay');
                const canvas = document.getElementById('overlayCanvas');
                const ctx = canvas.getContext('2d');
                const detectedObjectsListDiv = document.getElementById('detectedObjectsListText');

                function displayResults(data) {
                    resultsArea.innerHTML = ''; // Clear previous messages
                    let textResultsContent = `<h5>Analysis Complete (Job ID: ${data.jobId})</h5>`;
                    textResultsContent += `<p><strong>Status:</strong> <span class="badge bg-${data.status === 'Completed' ? 'success' : 'danger'}">${data.status}</span></p>`;
                    
                    if (data.analysis && data.analysis.success && data.analysis.predictions && data.analysis.predictions.length > 0) {
                        textResultsContent += '<p><strong>Predictions:</strong></p><ul>';
                        data.analysis.predictions.forEach(pred => {
                            textResultsContent += `<li>${pred.tagName}: ${pred.probability.toFixed(1)}%</li>`;
                        });
                        textResultsContent += '</ul>';
                    } else if (data.analysis && !data.analysis.success && data.analysis.errorMessage) {
                        textResultsContent += `<p class="text-danger"><strong>Analysis Error:</strong> ${data.analysis.errorMessage}</p>`;
                    } else if (data.status === 'Failed' && data.analysis && data.analysis.errorMessage) {
                        textResultsContent += `<p class="text-danger"><strong>Analysis Failed:</strong> ${data.analysis.errorMessage}</p>`;
                    } else if (data.status === 'Failed') {
                         textResultsContent += `<p class="text-danger"><strong>Analysis Failed:</strong> No detailed error message available.</p>`;
                    }
                     else {
                        textResultsContent += '<p>No predictions available or analysis did not complete successfully.</p>';
                    }

                    if (data.analysis && data.analysis.hasOwnProperty('ocrText')) { // Check if ocrText property exists
                        textResultsContent += '<br /><hr /><h6>Extracted Text (OCR):</h6>';
                        if (data.analysis.ocrText && data.analysis.ocrText.trim() !== "" && data.analysis.ocrText !== "No text blocks found") { // Check if there's actual text
                            @* Using <pre> to preserve formatting like line breaks from the OCR result *@
                            textResultsContent += `<pre style="white-space: pre-wrap; word-wrap: break-word; border: 1px solid #ccc; padding: 10px; background-color: #f9f9f9;">${escapeHtml(data.analysis.ocrText)}</pre>`;
                        } else {
                            textResultsContent += `<p><em>${escapeHtml(data.analysis.ocrText) || "No text blocks found by OCR."}</em></p>`;
                        }
                    }
                    textResultsContent += `<br /><hr />`;
                    resultsArea.innerHTML = textResultsContent;

                    // --- Handle Object Detection Results
                    ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear previous drawings
                    imgElement.style.display = 'none';                // Hide image and canvas initially
                    canvas.style.display = 'none';
                    imageVisualizationArea.style.display = 'none';    // Hide the whole visualization area
                    detectedObjectsListDiv.innerHTML = '';            // Clear text list

                    if (data.analysis && data.analysis.detectedObjects && data.analysis.detectedObjects.length > 0) {
                        console.log("Attempting to display image and detected objects."); // Client-side log
                        imageVisualizationArea.style.display = 'block'; // Show the area
                        imgElement.style.display = 'block';
                        canvas.style.display = 'block';

                        imgElement.onload = () => {
                            console.log("Image loaded for bounding box display. Actual dims:", imgElement.naturalWidth, "x", imgElement.naturalHeight, "Displayed dims:", imgElement.offsetWidth, "x", imgElement.offsetHeight);
                            canvas.width = imgElement.offsetWidth;
                            canvas.height = imgElement.offsetHeight;
                            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas before drawing

                            let odListHtml = '<h6>Detected Objects:</h6><ul>';
                            data.analysis.detectedObjects.forEach(obj => {
                                const box = obj.boundingBox; // { left, top, width, height } are 0.0-1.0
                                const x = box.left * canvas.width;
                                const y = box.top * canvas.height;
                                const w = box.width * canvas.width;
                                const h = box.height * canvas.height;

                                ctx.strokeStyle = 'lime';
                                ctx.lineWidth = 2;
                                ctx.strokeRect(x, y, w, h);

                                ctx.fillStyle = 'lime';
                                ctx.font = '14px Arial';
                                ctx.textBaseline = 'top'; // Align text with top of box
                                const label = `${escapeHtml(obj.tagName)} (${(obj.confidence).toFixed(1)}%)`;
                                ctx.fillText(label, x, y - 18 > 0 ? y - 18 : y + 5); // Draw label above box, or below if no space

                                odListHtml += `<li>${escapeHtml(obj.tagName)} - Confidence: ${(obj.confidence).toFixed(1)}%</li>`;
                            });
                            odListHtml += '</ul>';
                            detectedObjectsListDiv.innerHTML = odListHtml;
                            console.log.LogInformation("Bounding boxes drawn.");
                        };

                        imgElement.onerror = () => {
                            console.error("Error loading image for display. URI:", data.blobUri);
                            imageVisualizationArea.style.display = 'block'; // Show area to display error
                            imgElement.style.display = 'none';
                            canvas.style.display = 'none';
                            detectedObjectsListDiv.innerHTML = "<p class='text-danger'>Could not load image to display detections. The image might be private or the URL invalid.</p>";
                        };
                        
                        // Set the image source.
                        // The 'data' object comes from the status poll, which is AnalysisStatusResponse from API.
                        imgElement.src = data.blobUri; 
                        console.log("Setting image source for bounding boxes to:", data.blobUri);

                    } else if (data.analysis && data.analysis.hasOwnProperty('detectedObjects')) {
                        // No objects were detected, or the list was empty
                        imageVisualizationArea.style.display = 'block'; // Show area
                        imgElement.style.display = 'none'; // No image needed if no boxes
                        canvas.style.display = 'none';
                        detectedObjectsListDiv.innerHTML = '<h6>Detected Objects:</h6><p><em>No objects detected (or none above confidence threshold).</em></p>';
                    }
                    // /--- Handle Object Detection Results
                }

                function pollForStatus() {
                    pollAttempts++;
                    if (pollAttempts > maxPollAttempts) {
                        resultsArea.innerHTML = '<p class="text-warning">Stopped polling for results after 1 minute. Please check back later or try again.</p>';
                        return;
                    }

                    resultsArea.innerHTML = `<p>Checking analysis status (attempt ${pollAttempts})... <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span></p>`;
                    
                    fetch(statusUrl)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Network response was not ok: ${response.statusText}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.status === "Completed" || data.status === "Failed" || data.status.startsWith("Error")) {
                                displayResults(data);
                                // Stop polling
                            } else if (data.status === "Processing" || data.status === "Queued") {
                                resultsArea.innerHTML = `<p>Status: ${data.status}. Will check again in ${pollingInterval / 1000} seconds... <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span></p>`;
                                setTimeout(pollForStatus, pollingInterval);
                            } else {
                                // Unexpected status
                                resultsArea.innerHTML = `<p class="text-warning">Received unexpected status: ${data.status}. Stopping polling.</p>`;
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching analysis status:', error);
                            resultsArea.innerHTML = `<p class="text-danger">Error fetching analysis status: ${error.message}. Please try refreshing.</p>`;
                            @* Optionally stop polling on error or retry a few times *@
                        });
                }

                // Start polling immediately after the initial 202 Accepted response is handled by the server-side Razor Page
                if (jobId && apiBaseUrl) {
                    console.log("Starting polling for Job ID:", jobId, "at URL:", statusUrl);
                    pollForStatus();
                } else {
                    if (!jobId) console.error("JobId not available to start polling.");
                    if (!apiBaseUrl) console.error("API Base URL not available to start polling.");
                    resultsArea.innerHTML = "<p class='text-danger'>Could not start polling: Configuration missing.</p>"
                }
            })();
        </script>
    }
}
